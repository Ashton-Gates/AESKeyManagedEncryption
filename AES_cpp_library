#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <random>
#include <openssl/aes.h>
#include <openssl/rand.h>

class AESKeyManager {
private:
    // Assuming AES keys are represented as strings for simplicity.
    std::vector<std::string> keys;
    std::set<std::string> usedKeys;

    // Random number generator
    std::random_device rd;
    std::mt19937 g;

public:
    AESKeyManager() : g(rd()) {}

    // Add a new key to the library
    void addKey(const std::string& key) {
        if (usedKeys.find(key) == usedKeys.end()) {
            keys.push_back(key);
        }
    }

    // Sort the keys
    void sortKeys() {
        std::sort(keys.begin(), keys.end());
    }

    // Randomize the order of the keys
    void randomizeKeys() {
        std::shuffle(keys.begin(), keys.end(), g);
    }

    // Get the next key. This will mark the key as used and remove it from the list.
    std::string getNextKey() {
        if (keys.empty()) {
            throw std::runtime_error("No more keys available");
        }

        std::string key = keys.back();
        keys.pop_back();
        usedKeys.insert(key);
        return key;
    }

    // Check if a key has been used
    bool isKeyUsed(const std::string& key) const {
        return usedKeys.find(key) != usedKeys.end();
    }

    // Print all available keys
    void printKeys() const {
        for (const auto& key : keys) {
            std::cout << key << std::endl;
        }
    }
};

class AESEncryption {
private:
    AESKeyManager& keyManager;

public:
    AESEncryption(AESKeyManager& manager) : keyManager(manager) {}

    std::vector<unsigned char> encrypt(const std::string& plaintext) {
        std::string key = keyManager.getNextKey();
        if (key.empty()) {
            throw std::runtime_error("No available keys for encryption");
        }

        unsigned char iv[AES_BLOCK_SIZE];
        RAND_bytes(iv, AES_BLOCK_SIZE);

        std::vector<unsigned char> ciphertext(plaintext.size() + AES_BLOCK_SIZE);
        int len;

        AES_KEY encryptKey;
        AES_set_encrypt_key((const unsigned char*)key.c_str(), 128, &encryptKey);
        AES_cfb128_encrypt((const unsigned char*)plaintext.c_str(), ciphertext.data(), plaintext.size(), &encryptKey, iv, &len, AES_ENCRYPT);

        ciphertext.resize(len);  // Resize to actual ciphertext length
        return ciphertext;
    }

    std::string decrypt(const std::vector<unsigned char>& ciphertext, const std::string& key) {
        unsigned char iv[AES_BLOCK_SIZE];
        RAND_bytes(iv, AES_BLOCK_SIZE);

        std::vector<unsigned char> decryptedtext(ciphertext.size());
        int len;

        AES_KEY decryptKey;
        AES_set_decrypt_key((const unsigned char*)key.c_str(), 128, &decryptKey);
        AES_cfb128_encrypt(ciphertext.data(), decryptedtext.data(), ciphertext.size(), &decryptKey, iv, &len, AES_DECRYPT);

        return std::string(decryptedtext.begin(), decryptedtext.begin() + len);
    }
};
int main() {
    AESKeyManager manager;
    manager.addKey("key1");
    manager.addKey("key2");
    manager.addKey("key3");

    AESEncryption aes(manager);

    std::string plaintext = "Hello, World!";
    std::vector<unsigned char> encrypted = aes.encrypt(plaintext);
    std::cout << "Encrypted size: " << encrypted.size() << std::endl;

    // For demonstration purposes, we're using the same key for decryption.
    // In a real-world scenario, you'd manage keys differently.
    std::string decrypted = aes.decrypt(encrypted, "key1");
    std::cout << "Decrypted: " << decrypted << std::endl;

    return 0;
}
